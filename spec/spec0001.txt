Specification: 0001                                          Robin Bron
                                                             Ratus B.V.
                                                            August 2018


                         Javascript Styling

Copyright Notice

   This document is licensed under a
   Creative Commons Attribution 4.0 International License

   You should have received a copy of the license along with this work.
   If not, see <http://creativecommons.org/licenses/by/4.0/>













































Bron                                                           [Page 1]
SPEC 0001                Javascript Styling                 August 2018

Table of contents

   1. Introduction .................................................. 3
      1.1. Conventions .............................................. 3
   2. Source file basics ............................................ 3
      2.1. File name ................................................ 3
      2.2. File encoding ............................................ 3
      2.3. Special characters ....................................... 3
         2.3.1. Whitespace characters ............................... 3
         2.3.2. Special escape sequences ............................ 3
         2.3.3. Non-ASCII characters ................................ 3
   3. Formatting .................................................... 4
      3.1. Braces ................................................... 4
         3.1.1. Control structures .................................. 4
         3.1.2. Non-empty blocks .................................... 4
         3.1.3. Empty blocks ........................................ 4
      3.2. Indentation .............................................. 4
      3.3. String literals .......................................... 4
      3.4. Number literals .......................................... 5
      3.5. Array literals ........................................... 5
      3.6. Object literals .......................................... 5
      3.7. Functions ................................................ 6
         3.7.1. Function literals ................................... 6
         3.7.2. Arrow function literals ............................. 6
         3.7.3. Generator functions ................................. 6
         3.7.4. Parameters .......................................... 6
            3.7.4.1. Default parameters ............................. 6
            3.7.4.2. Rest parameters ................................ 7
         3.7.5. Returns ............................................. 7
         3.7.6. Spread operator ..................................... 7
      3.8. Classes .................................................. 7
         3.8.1. Constructors ........................................ 7
         3.8.2. Fields .............................................. 7
         3.8.3. ES5 class declarations .............................. 7
         3.8.4. Prototype manipulation .............................. 8
         3.8.5. Getters and setters ................................. 8
      3.9. This ..................................................... 8
      3.10. Disallowed features ..................................... 8
   4. Naming ........................................................ 9
      4.1. Rules for all identifiers ................................ 9
      4.2. Rules by identifier type ................................. 9
















Bron                                                           [Page 2]
SPEC 0001                Javascript Styling                 August 2018

1. Introduction

   This document serves as the complete definition of the coding
   standards for source code in the JavaScript programming language as
   followed by TrackThis. A JavaScript source file is described as
   being "in TrackThis style" if, and only if, it adheres to the rules
   herein.

   Like other programming style guides, the issues covered span not
   only aesthetic issues of formatting, but other types of conventions
   or coding standards as well. However, this document focuses
   primarily on the hard-and-fast rules that we follow universally, and
   avoids giving advice that isn't clearly enforceable (whether by
   human or tool).

1.1. Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   RFC2119 when, and only when, they appear in all capitals, as shown
   here.

2. Source file basics

   2.1. File name

      File names MUST be all lowercase and may include underscores (_)
      or dashes (-), but no additional punctuation. The extension MUST
      always be ".js".

   2.2. File encoding

      Source files MUST always be encoded according to the UTF-8
      standard (See RFC3629).

   2.3. Special characters

      2.3.1 Whitespace characters

         Aside from the line-feed character, the ASCII (See RFC20)
         horizonal space character (0x20) is the only whitespace
         character that appears anywhere in a source files.

      2.3.2. Special escape sequences

         For any character that has a special escape sequence, that
         sequence SHOULD be used rather than the corresponding numeric
         escape sequence. Legacy octal escapes MUST NOT be used.

      2.3.3. Non-ASCII characters

         For the remaining non-ASCII characters, either the actual
         Unicode character or the equivalent hex or Unicode escape is
         used, depending only on which makes the code easier to read
         and understand.

Bron                                                           [Page 3]
SPEC 0001                Javascript Styling                 August 2018

3. Formatting

   3.1. Braces

      3.1.1. Control structures

         Braces are REQUIRED for all control structures (i.e. if, else,
         for, do, while, as wel as any others). The first statement of
         a non-empty block MUST begin on its own line.

         Control structures SHOULD omit braces and be written on a
         single line if the both the statement and the control
         structure can be kept on a single line without wrapping when
         it improves readability.

      3.1.2. Non-empty blocks

         Braces follow the Kernighan and Ritchie style
         ("Egyptian brackets") for non-empty blocks and block-like
         structures.

         - No line break before the opening brace
         - Line break after the opening brace
         - Line break before the closing brace
         - Line break after the closing brace if that brace terminates
           a statement or the body of a function or class statement, or
           a class method. Specifically, there is no line break after
           the brace if it is followed by "else", "catch", "while", or
           a comma, semicolon, or right-prarenthesis.

      3.1.3. Empty blocks

         An empty block or block-like construct SHOULD be closed
         immediately after it is opened, with no characters, space, or
         line break in between, unless it is part of a multi-block
         statement.

   3.2. Indentation

      Each time a new block or block-like construct is opened, the
      indent increases by two spaces. When the block ends, the indent
      returns to the previous indent level. The indent level applies to
      both code and comments throughout the block.

   3.3. String literals

      Ordinary string literals SHOULD be delimited with single quotes
      (') and MUST NOT span multiple lines.

      To prevent complex string concatenation, template strings
      (delimited with `) SHOULD be used. Template strings MAY span
      multiple lines in which case they SHOULD adhere the indent level
      of the enclosing block if the whitespace does not affect
      functionality or complicates the code.



Bron                                                           [Page 4]
SPEC 0001                Javascript Styling                 August 2018

   3.4. Number literals

      Numbers may be specified in decimal, hexidecimal, octal or
      binary. Use exactly "0x", "0o" and "0b" prefixes, with lowercase
      characters, for hex, octal and binary respectively. Never include
      a leading zero unless it is immediately followed by "x", "o" or
      "b".

   3.5. Array literals

      Array literals SHOULD include a trailing comma whenever there is
      a line break between the final element and the closing bracket.

      The variadic Array constructor MUST NOT be used for creating a
      new array, unless used for allocating an empty array of a given
      length.

      Non-numeric properties on an array other than "length" or a
      Symbol MUST NOT be used. Use a Map or Object instead.

      Array literals MAY be used on the left-hand side of an assignment
      to perform destructuring (such as when unpacking multiple values
      from a single array or iterable). A final "rest" element MAY be
      included (with no space between the "..." and the variable name).

      Destructuring MAY also be used for function parameters (note that
      a parameter name is required but ignored). Always specify "[]" as
      the default value if a destructured array parameter is optional,
      and provide default values on the left hand side.

      Array literals MAY include the spread operator (...) to flatten
      elements out of one or more other iterables. The spread operator
      SHOULD be used instead of more awkward constructs with
      "Array.prototype". There is no space after the "...".

   3.6. Object literals

      A trailing comma SHOULD be used whenever there is a line break
      between the final property and the closing brace.

      While the Object constructor does not have the same problems as
      the Array constructor, the Object constructor MUST NOT be used to
      create a new object. Use an object literal instead.

      When writing an object literal, unquoted keys and quoted keys
      MUST NOT be used.

      Computed property names are allowed and are considered quoted
      keys (they MUST NOT be mixed with non-quoted keys) unless the
      computed property is a symbol. Enum values may also be used for
      computed keys, but should not be mixed with non-enum keys in the
      same literal.

      Methods SHOULD be defined on object literals using the method
      shorthand in place of a colon immediately followed by a function
      or arrow function literal to be consistent with class literals.

Bron                                                           [Page 5]
SPEC 0001                Javascript Styling                 August 2018

   3.7. Functions

      3.7.1. Function literals

         Exported top-level functions MAY be defined directly on the
         exports object or else declared locally and exported
         separately. Non-exported functions are encouraged and should
         not be declared private. Functions MAY contain nested function
         definitions. If it is useful to give the function a name, it
         should be assigned to a local const.

      3.7.2. Arrow function literals

         Arrow function literals SHOULD be used instead of "function"
         literals whenever applicable, unless the code is easier to
         read and understand when not.

         The right-hand side of the arrow MUST be either a single
         expression or a block. Multiple expressions MAY NOT be
         concatenated into a single expression using commas when used
         as the only statement of an arrow function.

      3.7.3. Generator functions

         Generators enable a number of useful abstractions and MAY be
         used as needed. When defining generator functions, attach the
         "*" to the "function" keyword when present and separate it
         with a space from the name of the function. When using
         delegating yields, attach the "*" to the "yield" keyword.

      3.7.4. Parameters

         3.7.4.1. Default parameters

            Function parameters MUST be typed with JSDoc annotations in
            the JSDoc preceding the function's definition,

            Parameter types MAY be specified inline, immediately before
            the parameter name. Inline and "@param" type annotations
            MUST NOT be mixed in the same function definition.

            Optional parameters SHOULD be indicated by using the equals
            operator to set a default value for that parameter, even if
            the default value should be undefined. Optional parameters
            indicated by a default value MUST include spaces on both
            sides of the equals operator, be named exactly like
            required parameters (i.e. not prefixed), use the "=" suffix
            in their JSDoc type and not use initializers that produce
            observable side effects. Optional parameters SHOULD come
            after required parameters.

            Use default parameter values sparingly. Prefer
            destructuring to create readable APIs when there are more
            than a small handful of optional parameters that do not
            have a natural order.


Bron                                                           [Page 6]
SPEC 0001                Javascript Styling                 August 2018

         3.7.4.2. Rest parameters

            Use a rest parameter instead of accessing the special
            arguments variable. Rest parameters are typed with a "..."
            prefix in their JSDoc. The rest parameter MUST be the last
            parameter in the list. There is no space between the "..."
            and the parameter name. The rest parameter MUST NOT be
            named "arguments" or any other word which confusingly
            shadows built-in names.

      3.7.5. Returns

         Function return types MUST be specified in the JSDoc directly
         above the function definition.

      3.7.6. Spread operator

         Function calls MAY use the spread operator. The spread
         operator SHOULD be used in preference over
         Function.prototype.apply when an array or iterable is unpacked
         into multiple parameters of a variadic function. There MUST
         NOT be a space between the spread operator and the array or
         iterable.

   3.8. Classes

      3.8.1. Constructors

         Constructors are OPTIONAL for concrete classes. Subclass
         constructors MUST call "super()" before setting any fields or
         otherwise accessing "this", unless required to do so in order
         to acquite their goal.

      3.8.2. Fields

         All of a concrete object's fields (i.e. all properties other
         than methods) MUST be set from within the constructor. Fields
         that are never reassigned SHOULD be annotated with "@const".

         Private fields SHOULD either be annotated with "@private" or
         have a Symbol as key. Fields MUST NOT be set on a concrete
         class' prototype.

      3.8.3. ES5 class declarations

         While ES6 classes are preferred, there are cases where ES6
         classes may not be feasible.

         Per-instance properties SHOULD be defined in the constructor
         after the call to the super class constructor, if a super
         class exists. Methods SHOULD be defined on the prototype of
         the constructor.





Bron                                                           [Page 7]
SPEC 0001                Javascript Styling                 August 2018

      3.8.4. Prototype manipulation

         In ES6 class definitions, the prototype of the class SHOULD
         NOT be manipulated directly. Ordinary implementation code has
         no business manipulating these objects.

         Mixins and modifications of the prototypes of builtin objects
         SHALL NOT be used, unless part of framework code which
         otherwise would resort to even-worse workarounds to avoid
         doing so.

      3.8.5. Getters and setters

         The JavaScript getter and setter properties MUST NOT be used,
         unless part of data-binding frameworks where they MAY be used
         sparingly.

   3.9. This

      Only use the this builtin in class constructors and methods, or
      in arrow functions defined within class constructors and methods.
      Any other uses of this MUST have an explicit "@this" declared in
      the immediately-enclosing function's JSDoc.

      The this builtin SHOULD NOT be used to refer to the global
      object, the context of an eval or the target of an event.

   3.10. Disallowed features

      The "with" keyword
         The "with" keyword MUST NOT be used. It makes your code harder
         to understand and has been banned in strict mode since ES5.

      Dynamic code evaluation
         The "eval" method and the "Function(...string)" constructor
         MUST NOT be used outside of code loaders. These features are
         potentially dangerous and simply do not work in CSP
         environments.

      Automatic semicolon insertion
         Always terminate statements with semicolons, except for
         function and class declarations.

      Non-standard features
         Non-standard features MUST NOT be used. This includes old
         features that have been removed, new features that are not yet
         standardized or proprietary that are only implemented in some
         JavaScript environments. These features are only allowed if
         the code being written is intended for only that environment.

      Wrapper objects for primitive types
         Never use the "new" keyword on primitive object wrappers nor
         include them in type annotations. The wrappers MAY be called
         as functions for coercing (which is preferred over using "+"
         or concatenating the empty string) or creating Symbols.


Bron                                                           [Page 8]
SPEC 0001                Javascript Styling                 August 2018

4. Naming

   4.1. Rules for all identifiers

      Identifiers MUST use only ASCII letters, digits, underscores and
      the dollar sign.

      Give as descriptive a name as possible, within reason. Do not
      worry about saving horizontal space as it is far more important
      to make your code immediately understandable by a new reader. Do
      not use abbreviations that are ambiguous or unfamiliar to readers
      outside your project and do not abbreviate by deleting letters
      within a word.

   4.2. Rules by identifier type

      Package names ........................................ kebab-case
      Class names ...................................... UpperCamelCase
      Method names ..................................... lowerCamelCase
      Enum names ....................................... UpperCamelCase
      Constant names .................................... CONSTANT_CASE
      Non-constant field names ......................... lowerCamelCase
      Parameter names .................................. lowerCamelCase
      Local variable names ............................. lowerCamelCase
      Template parameter names .......................... CONSTANT_CASE
































Bron                                                           [Page 9]
SPEC 0001                Javascript Styling                 August 2018


N. Informative resources

   [JSGUIDE]     Google JavaScript Style Guide
                 https://google.github.io/styleguide/jsguide.html

   [STANDARDJS]  StandardJS standard style
                 https://standardjs.com/rules.html

   [kebab-case]  Special case styles
                 https://en.wikipedia.org/wiki/Kebab_case

   [RFC20]       ASCII format for Network Interchange
                 Vint Cerf
                 https://tools.ietf.org/html/rfc20

   [RFC2119]     RFC Key Words
                 S. Bradner
                 https://tools.ietf.org/html/rfc2119

   [RFC3629]     UTF-8
                 F. Yergeau
                 https://tools.ietf.org/html/rfc3629


































Bron                                                          [Page 10]
SPEC 0000               Specification format                August 2018

N. Author information

   Name ....... Robin Bron
   Nickname ... Finwo
   EMail ...... robin@finwo.nl




















































Bron                                                           [Page N]
